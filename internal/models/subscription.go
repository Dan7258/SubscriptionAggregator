package models

import (
	"github.com/google/uuid"
)

// @Description Subscription model for managing user subscriptions.
type Subscription struct {
	// The unique identifier of the subscription (auto-generated by the database).
	// Required: false
	Id uint64 `json:"id" gorm:"primary_key"`

	// The name of the subscription service (e.g., "Yandex Plus").
	// Required: true
	ServiceName string `json:"service_name"`

	// The price of the subscription in currency units.
	// Required: true
	// Minimum: 0
	Price uint `json:"price"`

	// The unique identifier of the user (UUID format).
	// Required: true
	// Format: uuid
	UserID uuid.UUID `json:"user_id"`

	// The start date of the subscription in MM-YYYY format (e.g., "03-2025").
	// Required: true
	// Example: 03-2025
	StartDate MonthYear `json:"start_date" swaggertype:"string"`
}

func (db PostgresDatabase) CreateSubscription(subscription Subscription) error {
	err := db.Conn.Create(&subscription).Error
	return err
}

func (db PostgresDatabase) GetSubscriptionByID(id uint64) (Subscription, error) {
	var subscription Subscription
	err := db.Conn.First(&subscription, id).Error
	return subscription, err
}

func (db PostgresDatabase) UpdateSubscriptionByID(id uint64, subscription Subscription) error {
	err := db.Conn.Model(&subscription).Where("id = ?", id).Updates(subscription).Error
	return err
}

func (db PostgresDatabase) DeleteSubscriptionByID(id uint64) error {
	err := db.Conn.Delete(&Subscription{}, id).Error
	return err
}

func (db PostgresDatabase) GetSubscriptions() ([]Subscription, error) {
	var subscriptions []Subscription
	err := db.Conn.Find(&subscriptions).Error
	return subscriptions, err
}
